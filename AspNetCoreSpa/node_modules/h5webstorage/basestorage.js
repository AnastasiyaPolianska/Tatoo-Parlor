"use strict";
var core_1 = require("@angular/core");
/**
 * The token used to allow injection of the {@link StorageOptions} interface. For more information visit the {@link https://angular.io/docs/ts/latest/guide/dependency-injection.html#interface angular2 docs}.
 */
exports.STORAGE_OPTIONS = new core_1.OpaqueToken("StorageOptions");
/**
 * An object that SERializes and DESeriallizes values for storage. The default implementation for the SerDes object is:
 * `{ provide: SERDES_OBJECT, useValue: { stringify: JSON.stringify, parse: JSON.parse } }` which is essentially the
 * `{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON window.JSON}` object.
 * Due to the fact that the JSON object is also an interface in TypeScript, it couldn't be used as-is. This is the reason
 * the default implementation defines the `stringify` and `parse` methods individually instead of just using the JSON object
 * as the value.
 *
 * Should you want to implement customized serialization and deserialization for something like encrypted storage, simply
 * provide new methods for stringify and parse and you're good to go.
 */
exports.SERDES_OBJECT = new core_1.OpaqueToken("SerdesObject");
var KeyDirection;
(function (KeyDirection) {
    KeyDirection[KeyDirection["From"] = 0] = "From";
    KeyDirection[KeyDirection["To"] = 1] = "To";
})(KeyDirection || (KeyDirection = {}));
/**
 * BaseStorage is where all the implementation of the storage system resides. This can be used to make custom storage objects if needed
 * but more than likely, `LocalStorage` and `SessionStorage` will handle everything you need and creating services around those will
 * be easier than creating a new storage object. But for those situations where something else is needed, this is the class for you.
 *
 * NOTE: BaseStorage is an abstract class but the documentation generator makes no distintion.
 */
var BaseStorage = (function () {
    /**
     * Initializes the storage system by attaching to the angular2 change detection system and the Storage event system. Then
     * syncronizes the object with data from storage while respecting the options set. {@link LocalStorage}
     *
     * @param ngZone - The Zone handling angular 2 change detection.
     * @param storage - An object that implements the Storage interface. Generally [localStorage][] or [sessionStorage][]
     * [localStorage]: https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage
     * [sessionStorage]: https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage
     * @param transformer - An object that implements the JSON interface. This is injected using the {@link SERDES_OBJECT}
     * @param options - Contains the options that will be used with the instance
     */
    function BaseStorage(ngZone, storage, transformer, options) {
        var _this = this;
        //options = Object.assign({ prefix: "", transformer: JSON }, options);
        this.setProperty("options", options);
        this.setProperty("transformer", transformer);
        this.setProperty("storage", storage);
        this.UpdateFromStorage();
        var subscription = ngZone.onMicrotaskEmpty.subscribe(function () {
            var fromStorage = _this.getProperty("fromStorage");
            fromStorage ? _this.UpdateFromStorage() : _this.WriteToStorage();
        });
        var listener = function (event) { return event.storageArea == storage && _this.setProperty("fromStorage", true); };
        window.addEventListener("storage", listener);
        this.setProperty("subscription", subscription);
        this.setProperty("listener", listener);
    }
    BaseStorage.prototype.normalizeStorageKey = function (name, dir) {
        var options = this.getProperty("options");
        return dir == KeyDirection.From ? name.replace(options.prefix, "") : options.prefix + name;
    };
    BaseStorage.prototype.serialize = function (value) {
        var transformer = this.getProperty("transformer");
        return transformer.stringify(value);
    };
    BaseStorage.prototype.deserialize = function (value) {
        var transformer = this.getProperty("transformer");
        return transformer.parse(value);
    };
    BaseStorage.prototype.WriteToStorage = function () {
        var _this = this;
        var prevValue = this.getProperty("prevValue");
        var currValue = this.serialize(this);
        if (prevValue != currValue) {
            var storage = this.getProperty("storage");
            var prevStorage = this.deserialize(prevValue);
            Object.keys(this).forEach(function (key) {
                var _key = _this.normalizeStorageKey(key, KeyDirection.To);
                var value = _this[key];
                if (typeof _this[key] != "undefined") {
                    storage.setItem(_key, _this.serialize(_this[key]));
                    delete prevStorage[key];
                }
            }, this);
            for (var key in prevStorage) {
                storage.removeItem(this.normalizeStorageKey(key, KeyDirection.To));
            }
            this.setProperty("prevValue", this.serialize(this));
        }
    };
    BaseStorage.prototype.UpdateFromStorage = function () {
        var _this = this;
        var options = this.getProperty("options");
        var storage = this.getProperty("storage");
        var tmp = Object.assign({}, this);
        Object.keys(storage).forEach(function (key) {
            if (!key.startsWith(options.prefix)) {
                return;
            }
            var _key = _this.normalizeStorageKey(key, KeyDirection.From);
            try {
                delete tmp[_key];
                _this[_key] = _this.deserialize(storage[key]);
            }
            catch (e) {
                _this[_key] = options.serializeOnException ?
                    _this.serialize(storage[key]) :
                    null;
            }
        });
        for (var key in tmp) {
            delete this[this.normalizeStorageKey(key, KeyDirection.From)];
        }
        this.setProperty("prevValue", this.serialize(this));
        this.setProperty("fromStorage", false);
    };
    BaseStorage.prototype.ngOnDestroy = function () {
        this.getProperty("subscription").unsubscribe();
        var listener = this.getProperty("listener");
        window.removeEventListener("storage", listener);
    };
    /**
     * Retrieves data from the object stored as a property.
     */
    BaseStorage.prototype.getProperty = function (name) {
        return name in this ? this[name] : undefined;
    };
    /**
     * Stores data in a private private property that will not be stored in storage.
     * This is necessary because creating a class property results in an extra key in
     * storage.
     */
    BaseStorage.prototype.setProperty = function (name, value) {
        if (!(name in this)) {
            Object.defineProperty(this, name, { writable: true });
        }
        this[name] = value;
    };
    /**
     * Retrieves data stored is storage.
     * @param key - The identifier used to locate data in storage.
     */
    BaseStorage.prototype.getItem = function (key) {
        return this[key];
    };
    /**
     * Stores data in storage
     * @param key - The identifier to associate stored data with
     * @param value - The data to place in storage
     */
    BaseStorage.prototype.setItem = function (key, value) {
        try {
            //since the value of set item has to be a string, the value may already be stringified Json.
            //so we parse it to allow the WriteToStorage function to properly stringify object values.
            this[key] = this.deserialize(value);
        }
        catch (e) {
            this[key] = value;
        }
    };
    /**
     * Deletes data stored in storage
     * @param key - The identifier used to locate the data to be deleted
     */
    BaseStorage.prototype.removeItem = function (key) {
        delete this[key];
    };
    /**
     * Removes all keys managed by the storage object.
     */
    BaseStorage.prototype.clear = function () {
        var _this = this;
        Object.keys(this).forEach(function (key) {
            delete _this[key];
        });
    };
    /**
     * Retrieves an identifier
     * @param index - The position at which to look for an identifier. Index be at least zero
     * and must be less than length.
     */
    BaseStorage.prototype.key = function (index) {
        return Object.keys(this)[index];
    };
    Object.defineProperty(BaseStorage.prototype, "length", {
        /**
         * The number of values this instance is managing
         */
        get: function () {
            return Object.keys(this).length;
        },
        enumerable: true,
        configurable: true
    });
    return BaseStorage;
}());
exports.BaseStorage = BaseStorage;
