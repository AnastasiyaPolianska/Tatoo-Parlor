"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var basestorage_1 = require("./basestorage");
var localstorage_1 = require("./localstorage");
exports.LocalStorage = localstorage_1.LocalStorage;
var sessionstorage_1 = require("./sessionstorage");
exports.SessionStorage = sessionstorage_1.SessionStorage;
/**
 * Makes the  LocalStorage and SessionStorage objects available throught the application. Should be
 * added to the RootModule imports list.
 */
var WebStorageModule = (function () {
    function WebStorageModule() {
    }
    WebStorageModule = __decorate([
        core_1.NgModule({
            providers: [localstorage_1.LocalStorage, sessionstorage_1.SessionStorage]
        }), 
        __metadata('design:paramtypes', [])
    ], WebStorageModule);
    return WebStorageModule;
}());
exports.WebStorageModule = WebStorageModule;
/**
 * The objects necessary to use Web Storage in the browser
 */
exports.BROWSER_STORAGE_PROVIDERS = [
    { provide: localstorage_1.LOCAL_STORAGE_OBJECT, useValue: localStorage },
    { provide: sessionstorage_1.SESSION_STORAGE_OBJECT, useValue: sessionStorage },
    { provide: basestorage_1.SERDES_OBJECT, useValue: { stringify: JSON.stringify, parse: JSON.parse } },
    ConfigureStorage({ prefix: "" })
];
var storageproperty_1 = require("./storageproperty");
exports.StorageProperty = storageproperty_1.StorageProperty;
/**
 * Creates a provider for the StorageOptions
 * @param options - A {@link StorageOptions} object
 */
function ConfigureStorage(options) {
    return { provide: basestorage_1.STORAGE_OPTIONS, useValue: options };
}
exports.ConfigureStorage = ConfigureStorage;
