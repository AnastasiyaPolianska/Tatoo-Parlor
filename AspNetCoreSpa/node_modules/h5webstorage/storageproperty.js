"use strict";
var localstorage_1 = require("./localstorage");
var sessionstorage_1 = require("./sessionstorage");
function StorageProperty() {
    var params = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        params[_i - 0] = arguments[_i];
    }
    return function (target, decoratedPropertyName) {
        var options;
        if (params[0] && typeof params[0] == "object") {
            options = Object.assign({}, { storageKey: decoratedPropertyName, storage: "Local", readOnly: false }, params[0]);
        }
        else {
            options = Object.assign({}, { storageKey: params[0] || decoratedPropertyName, storage: params[1] || "Local", readOnly: false });
        }
        var storeObject = null;
        var initializing = !options.readOnly;
        /*in the current context, 'this' is the module containing the StorageProperty but what we
         * actually want is the object with the proerty we're defining. So we create this function
         * to be bound with the correct 'this' so we can have access to its properies. Of which,
         * one should be an instance of LocalStorage or SessionStorage
         */
        var findStore = function (obj) {
            if (!storeObject) {
                var storeKey = Object.keys(obj).find(function (key) {
                    return options.storage == "Local" ? obj[key] instanceof localstorage_1.LocalStorage : obj[key] instanceof sessionstorage_1.SessionStorage;
                });
                storeKey && (storeObject = obj[storeKey]);
                if (!storeObject) {
                    throw new Error("Object must have a property that is an instance of " + options.storage + "Storage.");
                }
            }
            return storeObject;
        };
        var initialize = function (obj) {
            //by adding a non-enumerable field to the object, we know if it's new or not and won't disrupt the developers code
            Object.defineProperty(obj, "_" + options.storageKey, {
                enumerable: false,
                value: undefined,
                writable: true
            });
        };
        var propertyObj = {
            get: function () {
                initialize(this);
                findStore(this);
                return storeObject.getItem(options.storageKey);
            },
            enumerable: false,
        };
        //if requesting a readOnly property don't create the set
        if (!options.readOnly) {
            propertyObj["set"] = function (value) {
                if (!this.hasOwnProperty("_" + options.storageKey)) {
                    initialize(this);
                    findStore(this);
                    var storedValue = storeObject.getItem(options.storageKey);
                    if (typeof storedValue != "undefined") {
                        return;
                    }
                }
                storeObject.setItem(options.storageKey, value);
            };
        }
        Object.defineProperty(target, decoratedPropertyName, propertyObj);
    };
}
exports.StorageProperty = StorageProperty;
